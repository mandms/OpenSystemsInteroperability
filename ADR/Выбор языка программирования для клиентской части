# ADR - Выбор языка программирования для клиентской части
Дата: 17.09.2024  
Статус: Принято
## Контекст
При разработке фотохостинга необходимо создать высокоэффективное и отзывчивое веб-приложение, которое обеспечит пользователям удобный интерфейс для загрузки, хранения и обмена фотографиями. Приложение должно поддерживать различные устройства и платформы, включая мобильные и десктопные. Также важны требования к безопасности данных пользователей и интеграции с бэкенд-сервисами.

Ограничения включают необходимость быстрого выхода на рынок, доступность разработчиков и возможность масштабирования приложения.

## Рассматриваемые варианты
1. JavaScript (React/Vue): Широко используемый язык для создания интерактивных веб-приложений с большим сообществом и множеством библиотек.
2. TypeScript: Надстройка над JavaScript с статической типизацией, что улучшает качество кода и упрощает поддержку больших проектов.
3. Dart (Flutter): Позволяет создавать кроссплатформенные приложения с единым кодом для веба и мобильных устройств, но имеет меньшую популярность среди разработчиков.

## Решение
Выбран язык программирования TypeScript для клиентской части фотохостинга.

## Обоснование
- Статическая типизация: TypeScript позволяет выявлять ошибки на этапе компиляции, что снижает количество багов в продакшене и упрощает поддержку кода.
- Совместимость с JavaScript: TypeScript полностью совместим с существующим кодом на JavaScript, что позволяет использовать уже имеющиеся библиотеки и фреймворки.
- Поддержка крупных проектов: TypeScript лучше подходит для работы над большими проектами благодаря своей структуре и возможностям модульности.

## Обоснование

Принятое решение повлияет на проект следующим образом:

Плюсы:
- Улучшение качества кода за счет статической типизации.
- Упрощение процесса рефакторинга и добавления новых функций.
- Широкие возможности интеграции с популярными библиотеками и фреймворками.

Минусы:
- Необходимость обучения команды, если у них нет опыта работы с TypeScript.
- Возможное увеличение времени на начальную настройку проекта по сравнению с чистым JavaScript.

Риски:
- Возможные трудности при интеграции с существующими библиотеками, которые не поддерживают TypeScript.
Минимизация: Провести предварительный анализ используемых библиотек и выбрать те, которые имеют хорошую поддержку TypeScript или предоставить обертки.

- Потребность в дополнительных инструментах для сборки и компиляции.
Минимизация: Использовать популярные сборщики (например, Webpack) с готовыми конфигурациями для TypeScript.

## Затронутые области
Решение затронет следующие части системы:
- Клиентская часть (интерфейс пользователя, взаимодействие с API).
- Инструменты разработки (сборщики, линтеры, тестирование).
- Документация по проекту (необходимость обновления материалов для новых разработчиков).

## История
Решение было принято 11 сентября 2024 года в ходе совещания команды архитекторов и разработчиков. Основные обсуждения касались вопросов качества кода, поддержки командой и интеграции с существующими решениями. После анализа требований бизнеса и существующих технологий был выбран TypeScript как наиболее подходящий язык программирования для клиентской части фотохостинга.
